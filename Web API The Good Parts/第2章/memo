2章 エンドポイントの設計とリクエストの形式

・APIとして公開する機能を設計する
シンプルな方法つぃてサービスが利用するデータベースのテーブルを
直接操作するようなものを作ることはできる。
→テーブルの構造を知らないと使えないし内部構造を公開することによる危険性が高い。
　→もう少し高い次元での機能を表すものである必要がある。
ポイントはAPIがどのようにつかわれるかを考えること。

APIを考えるにあたりクライアントアプリの画面とその遷移をまずは考える。
→これを基にどんな機能をAPIとして提供すべきかを考える。
　→遷移図と提供すべき機能を見比べて過不足がないかを確認する。

APIで提供する機能を決めたらエンドポイントを考えながらAPIを整理する。
→エンドポイント＝APIにアクセスするためのURI
URIを決める場合の原則は以下
・覚えやすくどんな機能を持つURIなのかが一目でわかる
つまりどんなもの？
- 短く入力しやすいURI
意味が重複している文字が複数含まれていたりしていない。
- 人間が読んで理解できるURI
むやみに省略しない。
ただし標準化され体系化された表記がある場合はそちらに準拠する。(jpとか)
使う言葉はよく使われている単語を使うこと。（英語の意味よりそっちの方が重要）
ただし英語っぽいけど英語ではない和製英語は避けること
- 大文字小文字が混在していないURI
基本は小文字で。getUserNameとかキャメルケースにした方が良いのでは？というケースは
そもそもその名前にしていることがおかしい。
誤って小文字にも関わらず大文字でアクセスしてきた場合は404を返せばよい。
- 改造しやすいURI
例えばURIの最後にIDをつけてそのIDに対して何らかの情報を取得するというURIに
なっていればIDを変えれば別の情報が取れるという風に直感的に分かりやすいと開発しやすい。
- サーバ側のアーキテクチャが反映されていないURI
もし仮にPHPだった場合xxx.php?userid=100とかがAPIのURIになっているとただの脆弱性。
ユーザが欲しいのは機能やデータ構造であってサーバがどうやって動作しているかではない。
- ルールが統一されたURI
URI内に渡す値を入れたりクエリパラメータで入れたりするようなURIになっていると
トラブルの温床となりやすい。

URI＝操作する対象＝リソースを表すもの
HTTPメソッド＝何をするかを表すもの
URIのエンドポイントに異なるメソッドでアクセスすることで取得だけでなく、削除や変更も行えるようになる。
なのでリソースとそれらをどう扱うかを分離することが重要。
APIとして使えるメソッドは以下
- GET・・・リソースの取得
URIで指定されたリソースを取得するために利用。
GETメソッドで変更処理を書いてはいけない。
- POST・・・リソースの新規登録
新しい情報を登録するために利用するのが本来の目的。
情報を更新することが目的ではない。
- PUT・・・既存リソースの更新
POSTと同じく情報を変更するもの。違いはPOSTがURIに従属するのに対し
PUTは更新したいリソースそのものを指定し内容を書き換える。
なので存在していれば修正するという動作になる。
- DELETE・・・リソースの削除
リソースの削除。それ以上でも以下でもない。
- PATCH・・・リソースの一部更新
PUTと同様に更新ではあるが一部のみ更新するということを明示したメソッド。
GETとPOST以外は状況によって使えない場合がある。
なのでそれらと同様の動きをPOSTを使って実装する必要はある。
その方法は2つ。
1.X-HTTP-Method-OverrideというHTTPリクエストヘッダを利用する
→POSTメソッドに対して実際に利用したいメソッドで上書きするイメージ
2._methodというパラメータを利用する。
Formのパラメータとしてメソッドを送信するイメージ
- HEAD・・・リソースのメタ情報の取得

・APIのエンドポイント設計
基本的な設計項目は以下
- 目的
- エンドポイント
- メソッド
イメージとして
目的にあったテーブル、もしくはレコードをURIとし、それぞれどんな処理を行うかに
対してメソッドを選択する。

APIのエンドポイントを設計する上で注意すべき点は以下
- 複数形の名詞を利用する
基本的にリソースの集合を意味することが多いので複数形を利用する。
名詞を使うのはURIがリソースを表すものだから
- 利用する単語に気を付ける
ネイティブがどう判断するかわからない場合は特に気を付ける。
分からなければほかのAPIで利用されている単語を利用する。

- スペースやエンコードを必要とする文字を使わない
スペースを表現するためには%コーディングになる。
こうなると一目で何が書いてあるのか判別は不能になる。

- 単語をつなげる必要がある場合はハイフンを利用する
特に決まりはない。ただポリシーがなければハイフンにする方が無難。

・検索とクエリパラメータの設計
一覧取得を行えるとしてもユーザが多いと絞り込みをしたくなる。
なのでエンドポイントに絞り込みパラメータを実装することで検索が可能になる。
→その時に利用するのがクエリパラメータ

データの一部を取得する際にどういった取得数と取得位置を指定するか
→ページネーションの考え方。
基本的にはpageかoffset
pageはページ数。1から数えるのが通常。上限はper_pageで指定
offsetはアイテム数。0から数えるのが通常。上限はlimitで指定

page/per_pageとoffset/limitでどちらを使うかはそれぞれではあるが
ユーザ目線だとoffset/limitが自由度高い。

pageやoffsetは相対的な取得位置の取り方。
これだと先頭から何件目という取り方になるので先頭から数を数える処理が行われる。
なのでパフォーマンスが低下していく可能性が高い。
それに対応する方法として絶対位置でデータを取得することもできる。
→例えばこのIDより前のものとか。

また絞り込みの方法もある。
→このユーザの情報とか
絞り込みはURIに絞り込む要素と値を表示するようにすること。
"q="を使う場合は直感的に部分一致と思われることが多いので正しく利用すること。

・searchという言葉をuriに利用するか問題
全リストを取得するわけではなく検索するAPIだと強く表すためには使った方が良い。

・クライアントが指定する億艇のパラメータをクエリパラメータに入れるかパスに入れるか
判断する基準は以下
- 一意なリソースを表すのに必要な情報か
- 省略可能か
例えばユーザIDを指定することで一意に決まるのでパスに入れた方が良い。
アクセストークンの場合はクエリパラメータの方が適している

・ログイン処理
真っ先に検討すべきはOAuth。
OAuthとは？
第三者に公開されるAPIについて認可を行うために用いる。
OAuthを利用するためのエンドポイントは？
Twitterの/oauth2/tokenあたりをマネすればよい。

エンドポイントの共通部分となる箇所にはapiとつけた方が良い。

素晴らしいREST APIにいたるための設計レベル
- REST LEVEL0 HTTPの利用
- REST LEVEL1 リソース概念の導入
- REST LEVEL2 HTTPの動詞導入
- REST LEVEL3 HATEOSの概念の導入


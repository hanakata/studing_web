第6章 堅牢なWebAPIを作る

WebAPIはよほど一般的な情報を提供しているAPIでなければ
ほぼすべてにおいてユーザなどをコントロールする必要がある。

・どんなセキュリティの問題があるか
- サーバとクライアント間での情報の不正入手
　HTTPでやると暗号化されていないので誰でも読めるような状態で通信されている。
  簡単で効果があるのはHTTPSを利用すること。
  ただ100%安全にはならない、例えばサーバ側の脆弱性など、ので更新などの実施は必須。
  また中間者攻撃を受けると更新していてもだめな場合もある。
  ただHTTPS化しておけば細かい部分を置いておいたとしても効果はある。
- サーバの脆弱性による情報の不正入手および改ざん
- ブラウザからのアクセスを想定しているAPIにおける問題
　XSSなどの攻撃を受ける可能性がある。
　攻撃に利用される文字<や\/+などを利用できないように実装すること

・利用ユーザが悪意を持っている場合
- パラメータ改ざん
　サーバ側でも整合性をチェックする仕組みを作成しておく
- リクエスト再送信
  同じリクエストを複数回送信することで例えば購入処理を2重に行うことができる。
  なので同じリクエストがなかったか確認する仕組みが重要。

・セキュリティ関係のHTTPヘッダ
- X-Content-Type-Options
　利用することでJSONをJSONとして判断することができるようになる。
- X-XSS-Protection
  XSSの検出、防御機能を有効にする
- X-Frame-Options
  指定したページがフレーム内で読み込まれるかを制御することができる。

大量アクセスに対する対応はユーザごとに制御すること。
レートリミットは適切に行うこと
制限を超えた場合は429を返す。

・まとめ
- 個人情報など特定のユーザ以外に漏洩したくない情報がある場合、HTTPSを利用する
- XSS、XSRFなどの通常のウェブと同様のセキュリティだけでなくJSONハイジャックなどAPI特有の脆弱性に気を配る
- セキュリティ強化につながるHTTPヘッダを利用する
- レートリミットを設ける
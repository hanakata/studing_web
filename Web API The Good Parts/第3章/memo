3章 レスポンスデータの設計

レスポンスデータはまずデータフォーマットを考えること
→検討の余地はなく基本はjsonで必要なところをxmlで補えばよい

・XMLなど通常提供しているものとは別の形式で渡したいとき
ユーザがどうやってそれを提供してほしいとしているかがわかるような仕組みにすること。
どうやってその仕組みをつくるか？
- クエリパラメータを用意してそこにフォーマットを指定させる
- URIの最後に拡張子のような形で.json、.xmlをつけるようにする
- Acceptというリクエストヘッダを利用する。
どれを使うかは好み。
よく使われているのはクエリパラメータ。
行儀がいいのはリクエストヘッダを利用する方法。
拡張子は最近あまり使われない。

JSONをブラウザに渡す方法の1つとしてJSONPというものがある。
以下のようにJSONにそれをラップするJSをつける形式
callback({"id":123,"name":"Saeed"})
利用するためには関数をあらかじめ呼び出したscript要素の存在するページに用意する必要がある。
var apidata = {"id":123,"name":"Saeed"}
変数にすることですでにある関数とぶつかることを防ぐメリットがある。

基本的にはcallback関数の指定があればJSONPを要求しているとみなすというのが一般的。
JSONPを使う際はセキュリティ上の対策を行わないと同一性元ポリシー回避の攻撃対象となりうる
→使わなくていいなら使わない方が良い。

・データの内部構造の考え方
APIのアクセス回数を増やさないようなデータ構造にしないこと。
例えばユーザの一覧を取得する場合、ＩＤ一覧を出すだけだとIDを基に詳細情報を取得しにいく
APIをもう1回実行する必要がある。
それはサーバ側への負担にもつながるので必要そうな関連性のある情報はできるだけ提供する。
ただし取得できる情報はユーザで絞れるようにすること
→リクエストが来たら全部返すという形にするとデータサイズが大きくなりすぎる。

・エンベロープを使うべきか？
使うべきではない。
必要であってもHTTP側で実装されているので冗長的な表現にしかならない。

・データをフラットにすべきか？
なるべくフラットにすべきだが、必要があって分かりやすくなるなら階層化もあり。

・オブジェクトでつつむべきか配列にすべきか
以下の観点から考えるとオブジェクトの方が良い
- レスポンスデータが何をしめしているにか分かりやすくなす
- レスポンスデータ２をオブジェクトに統一することができる
- セキュリティ上のリスクを避けることができる。

・名前付けは？
よくある単語を用いること。
絶対によくある単語を全く違うことに利用しないこと。

・時刻を返す時のフォーマットは？
色々ありすぎるのでRFC3339を利用すること

・長すぎる整数を返す場合は？
桁あふれが発生する可能性があるので文字列で返すようにすること

APIで返す構造はできるだけAPIのユースケースを考え、それに合った情報を返すように設計する。

エラーはまずステータスコードを返すこと。
エラーが発生した詳細情報をクライアントに返すこと。
入れる情報は詳細コードと詳細情報へのリンク。
APIのエラー情報はオンラインにある方が良い。
エラーの場合にはHTMLを返さないようにしておく。

まとめ
JSON、あるいは目的に応じたデータ形式を採用する
データを不要なエンベロープで包まない
レスポンスはできるだけフラットに
各データの名前が簡潔で理解しやすく適切な単数、複数を用いられている
エラーの形式を統一しクライアント側でエラー詳細を機械的に理解可能にする。

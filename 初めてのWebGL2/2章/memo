2章 レンダリング

WebGLレンダリングパイプライン
WebGLは総合的な3DAPIだと考えられているが実際のところ
ラスタライゼーションエンジンにすぎない
またGPUで動作するためGPU上で実行されるコードを記述する必要がある。
コードは組となる2つの関数として与えられる必要がある。
・頂点シェーダ
　担当するのは頂点アトリビュートの計算。
　様々な座標に応じてこの関数はポイント、ライン、トライアングルを含む多様なプリミティブのラスタライズに必要な値を出力する。
・フラグメントシェーダ
　プリミティブをラスタライズするために呼び出される。担当は描画中のプリミティブの各ピクセル色を計算すること。
→この2つのシェーダを合わせてプログラムと呼ぶ

頂点バッファオブジェクト
描画対象のジオメトリを定義するデータを保持する。
インデックスバッファオブジェクト
レンダリングパイプラインが描画プリミティブを構築するときに使用する頂点同士の関係を保持
頂点シェーダ
各頂点に対して呼び出され頂点座標や法線、色、テクスチャ座標などの頂点ごとのデータを操作する。
フラグメントシェーダ
それぞれのピクセルの色を計算する。
フレームバッファ
フラグメントシェーダによって処理されたフラグメントを保持する2次元のバッファ。
アトリビュート
頂点シェーダで使用される入力変数
ユニフォーム
頂点シェーダとフラグメントシェーダの両方で利用できる入力変数
テクスチャ
シェーダープログラムからアクセスできる配列状のデータ
バリイング
頂点シェーダからフラグメントシェーダーにデータを受け渡すために使用する変数

WebGL内での描画
あらゆる3Dオブジェクトのジオメトリを表現するための基礎となるデータは頂点とインデックスの2つ。
頂点
3Dオブジェクトの角を定義する点。各頂点はx,y,z座標に対応する3つの浮動小数点数で表現される。
頂点はすべてJavaScriptで記述する必要がある。
インデックス
与えられた3Dシーン内の頂点のラベルとなる数値
WebGLバッファ作成
正方形を描画するにはどうするか？
ジオメトリに必要な頂点とインデックスを定義するJavaScript配列を用意し
それぞれに対応するバッファを作成する
以下JavaScript配列
const vertices = [
    -0.5, 0.5, 0,
    -0.5, -0.5, 0,
    0.5, -0.5, 0,
    0.5, 0.5, 0,
]
const positionBuffer = gl.createBuffer();

アトリビュートとVBOの関連づけ
作成したVBOは頂点シェーダーのアトリビュートと関連付けする必要がある。
これは以下の手順で可能
1.VBOをバインド
2.アトリビュートを現在バインドされているVBOに関連付ける
3.アトリビュートを有効にする
4.VBOのバインドを解除する

レンダリング
VBOを定義してそれらの頂点シェーダーを適切なアトリビュートに関連付けることで描画の準備は完了。
インデックス情報が使用できないときはdrawArryを使用する。
IBOが定義されている場合はdrawElements関数を用いて
WebGLにIBOを使用してジオメトリを描画できるよう指定できる。
